#!/usr/bin/perl -w



# Perl libs
use warnings;
use strict;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use Bio::SeqIO;
use Bio::DB::Fasta;
use Data::Dumper;
use List::Util 'shuffle';

# lib directory : ~tderrien/bin/perl/lib/
use Parser;
use ExtractFromHash;
use ExtractFromFeature;
use Intersect;
use Utils;
use Orf;
use Cpat;

# my $pathRcrossvalidation = "~tderrien/bin/perl/script/FEELnc/bin/crossValidation_cutoff.r";
my $pathRcrossvalidation = "~tderrien/bin/perl/script/FEELnc/bin/10crossValidation_cutoff.r";
my $progname=basename($0);

# Variables
my $infile		= '';
my $mRNAfile   	= '';
my $genome   	= '';
my $lncRNAfile 	= undef;
my %biotype;
my $man 		= 0;
my $help 		= 0;
my $verbosity	= 0;
my $outputlog;
my $cdnafile	= "cdnafile";
my $orffile		= "orffile";
my $numtx		=	2000; # number of tx for training
my $minnumtx	=	10; # Min number of tx for training (for debug)

# If CPAT cutoff is defined, not need to compute it on TP lncRNA and mRNA
my $cpatcut		= undef;
my $sn_sp		= undef;
# Intergenic extraction:
my $maxTries	= 10;
my $maxN		= 5;
		
my $proc		= 4;

## Parse options and print usage if there is a syntax error,
## or if usage was explicitly requested.
GetOptions(
	'i|infile=s'	 	=> \$infile,
	'a|mRNAfile=s'      => \$mRNAfile,	
	'l|lncRNAfile=s'	=> \$lncRNAfile,	
	'g|genome=s'		=> \$genome,		
	"n|numtx=i"			=> \$numtx,
	"f|biotype=s"       => \%biotype,
	"c|cpatcut=f"       => \$cpatcut,
	"o|outlog=s"		=> \$outputlog,	
	'v|verbosity=i'		=> \$verbosity,
	'help|?' 			=> \$help,
	'man' 				=> \$man
) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;


# Test parameters
pod2usage("Error: Cannot read your input GTF file '$infile'...\nFor help, see:\n$progname --help\n") unless( -r $infile);
pod2usage("Error: Cannot read your input annotation file '$mRNAfile'...\nFor help, see:\n$progname --help\n") unless( -r $mRNAfile);
pod2usage("Error: Cannot read your genome file '$genome' (-g option)...\nFor help, see:\n$progname --help\n") if (! -r $genome && !-d $genome);
pod2usage ("- Error: \$numtx option (number of transcripts for training) '$numtx' should be greater than $minnumtx  \n") unless ($numtx >= $minnumtx);
if (defined $cpatcut){
	pod2usage ("- Error: \$cpatcut option '$cpatcut' should be a float between 0 and 1 [0-1] \n") unless ($cpatcut >= 0 and $cpatcut <= 1);
}

#############################################################
my $commandline = qx/ps -o args $$/;


# Log File
##########
if (!defined $outputlog){
	$outputlog	=	Utils::renamefile($infile, ".feelnccodpot.log");
}
open(LOG,">$outputlog") or die("Cannot open '$outputlog'");


print LOG $commandline;
print STDERR "> Results will be available in file: '$outputlog'\n";


# Die if lnc training file is not set and mRNA file is in FASTA: no possibility of intergenic extraction
my $mRNAfileformat		=	Utils::guess_format($mRNAfile);
pod2usage ("- Error: Cannot train the program if lncRNA training file (-l option) is  is not defined and mRNA file (-a option) is in FASTA format...\n") if (!defined $lncRNAfile && $mRNAfileformat eq "fasta");


# store mRNA annotation = hashref
my $refmrna;

# If cpat cutoff is not defined, we have to compute it
if (!defined $cpatcut){

	print STDERR "> CPAT cutoff is not defined: computing optimal coding potential cutoff (Max Sn-Sp)...\n";
	
	##########################################################
	# mRNA file
	#######
	# Training file
	my $cdnafile		=	Utils::renamefile($mRNAfile, ".cdnatrain.fa");
	my $orffile			=	Utils::renamefile($mRNAfile, ".orftrain.fa");
	my $lncfile;
	if (defined $lncRNAfile){
		$lncfile		=	Utils::renamefile($lncRNAfile, ".lnctrain.fa");
	} else {
		$lncfile		=	Utils::renamefile($mRNAfile, ".mRNAlinctrain.fa");		
	}

	# if GTF
	# ------
	if ($mRNAfileformat eq "gtf"){
	
		$refmrna		= Parser::parseGTF($mRNAfile, 'exon,CDS,stop_codon', undef , \%biotype , $verbosity);
		my $sizeh = keys(%{$refmrna});
		
		die "Your input mRNA file '", basename($mRNAfile),"' contains only *$sizeh* transcripts.\nNot enough to training the program (default option --ntx|-n)\n" if ($sizeh < $numtx);
		print STDERR "Your input mRNA training file '", basename($mRNAfile),"' contains *$sizeh* transcripts\n" if ($verbosity > 0 );
		
		# Create cDNA and ORF 2 files for training and testing CPAT
		&CreateORFcDNAFromGTF($refmrna, $cdnafile, $orffile, $numtx, $genome, $verbosity);
		
	# if FASTA
	# ------
	} elsif ($mRNAfileformat eq "fasta") {
	
		# Create cDNA and ORF 2 files for training and testing CPAT
		&CreateORFcDNAFromFASTA($mRNAfile, $cdnafile, $orffile, $numtx, $verbosity);
	
	} else {
		die "Error : Unrecognized format for annotation file '$mRNAfile'\n";
	}
	
	##########################################################
	# lncRNA file
	#######
	# if file is defined, it means that we do not have to extract from intergenic
	if (defined $lncRNAfile){
	
		my $computeORF			=	undef; # we do not have to compute/extract ORF
		my $lncRNAfileformat	=	Utils::guess_format($lncRNAfile);

		# if GTF
		# ------
		if ($lncRNAfileformat eq "gtf"){
	
			my $reflnc		= Parser::parseGTF($lncRNAfile, 'exon' , undef, undef, $verbosity);
			my $sizeh = scalar keys(%{$reflnc});
		
			die "Your input lncRNA training file '", basename($lncRNAfile),"' contains only *$sizeh* transcripts.\nNot enough to training the program (default option --ntx|-n)\n" if ($sizeh < $numtx);
			print STDERR "Your lncRNA training file '", basename($lncRNAfile),"' contains *$sizeh* transcripts\n" if ($verbosity > 0 );		
		
			# Create cDNA and ORF 2 files for training and testing CPAT
			&CreateORFcDNAFromGTF($reflnc, $lncfile, $computeORF, $numtx, $genome, $verbosity);
		
		# if FASTA
		# ------
		}elsif ($lncRNAfileformat eq "fasta") {
	
			# Create cDNA and ORF 2 files for training and testing CPAT
			&CreateORFcDNAFromFASTA($lncRNAfile, $lncfile, $computeORF, $numtx, $verbosity);
	
		} else {
			die "Unrecognized format for lncRNA training file '$lncRNAfile'\n";
		}
	
	} else { # lncRNA training file not defined
	
		print STDERR "> The lncRNA training file is not set...will extract intergenic region for training (can take a while...)\n";
		
		# RElcoated mRNA sequence in intergenic regions to be used as a training lncRNA file
		&randomizedGTFtoFASTA ($refmrna, $lncfile, $genome, $numtx, $maxTries, $maxN, $verbosity);
		
	}
	
	#################################
	# Run CPAT on both mRNA and lncRNA
	my $nbtxdiv2	= int ($numtx/2); # to create 2 files
	my $suffixfirst	= "_1-".$nbtxdiv2.".fa";
	my $suffixtwo	= "_".$nbtxdiv2."-".$numtx.".fa";
	
	# CPAT outfiles
	my $mrnaout		=	$cdnafile.$suffixtwo;
	my $lncrnaout	=	$lncfile.$suffixtwo;
		
	# mRNA : $cdnafile.$suffixtwo ::  and traininf with first part
	print STDERR "> Run CPAT on $cdnafile.$suffixtwo:\n";
	Cpat::runCPAT($orffile.$suffixfirst, $cdnafile.$suffixfirst, $lncfile.$suffixfirst, $mrnaout, $cdnafile.$suffixtwo, $verbosity);

	# lncRNA : $lncfile.$suffixtwo :: and traininf with first part
	print STDERR "> Run CPAT on $lncfile.$suffixtwo:\n";
	Cpat::runCPAT($orffile.$suffixfirst, $cdnafile.$suffixfirst, $lncfile.$suffixfirst, $lncrnaout, $lncfile.$suffixtwo, $verbosity);
	
	
	# Parse both CPAT outfile 
	my $hcpatmrna	=	Parser::parseCPAT($cdnafile.$suffixtwo.".cpat", "1", $verbosity);
	my $hcpatlncrna	=	Parser::parseCPAT($lncfile.$suffixtwo.".cpat" , "0", $verbosity);	

	# WARNINGS : lncRNA ids SHOULD BE DIFFERENT than mRNA ids
	my $hcpatmerge	= { %$hcpatmrna, %$hcpatlncrna };
	print "> Compute optimal cutoff on ",scalar keys(%{$hcpatmerge})," transcripts\n";
	
	
	# Create a tmp file used that merges both analysis shuffled and is used to compute 10 cross validation Sn Sp by R
	open(CPATVAL,"> tmpcpat") or die("Cannot open tmp file for CPAT validation\n");
	
	# header
	print CPATVAL "\tmRNA_size\tORF_size\tFickett_score\tHexamer_score\tcoding_prob\tlabel\n";
	
	foreach my $id ( shuffle  keys (%$hcpatmerge) ){
		my @ar = ($id,
				 $hcpatmerge->{$id}->{'mRNA_size'}, 
				 $hcpatmerge->{$id}->{'ORF_size'}, 
				 $hcpatmerge->{$id}->{'Fickett_score'}, 
				 $hcpatmerge->{$id}->{'Hexamer_score'}, 
				 $hcpatmerge->{$id}->{'coding_prob'},
				 $hcpatmerge->{$id}->{'label'}
				 );
		print CPATVAL join ("\t", @ar);
		print CPATVAL "\n";
				 
	}
	
	close CPATVAL;
	
	# Launch 10 fold cross validation R script
	#################
	print "> 10 fold crossValidation of CPAT cutoff :\n";

	open my $command_out, "-|", "Rscript $pathRcrossvalidation tmpcpat 2>/dev/null"  or die "$0: could not start R program:  $pathRcrossvalidation";

	while (<$command_out>) {
		chomp;
		if ($_ =~ /Cutoff_SnSp/){
			my $line 	= $_;
			$line		=~ s/"//g;
			my @tmp 	= 	split (/\s+/, $line);
			$cpatcut	=	$tmp[-2];
			$sn_sp		=	$tmp[-1];
			
		}
	}    
	printf("> Best CPAT cutoff = %.3f -> Sn/Sp = %.3f\n", $cpatcut, $sn_sp);  
} else {
	printf("> User CPAT cutoff = %.3f\n", $cpatcut);  
}

# lncRNA : $lncfile.$suffixtwo :: and traininf with first part
# print STDERR "> Run CPAT on $lncfile.$suffixtwo:\n";
# Cpat::runCPAT($orffile.$suffixfirst, $cdnafile.$suffixfirst, $lncfile.$suffixfirst, $lncrnaout, $lncfile.$suffixtwo, $verbosity);





sub CreateORFcDNAFromGTF{

	my  ($h, $cdnafile, $orffile, $nbtx, $genome, $verbosity)	=	@_;
	
	# Note if $orffile is not defined, we just extract cDNA
	
	my $nbtxdiv2	= int ($nbtx/2);
	my $orfob;
	my $allow_no_start 	=	0;	# do not allow for CDS start not found
	my $allow_no_stop 	=	0;	# do not allow for CDS stop not found
	my %h_orf;					# for storing and printing ORF sequence
	my %h_cdna;					# for storing and printing cDNA sequence
	my $countseqok		=	0;			# counter on good ORF (start and end found)
	my $filterforCDS	=	0;		# get only line with CDS level


	for my $tr (keys(%{$h})){

		# shortcut for feature2seq sub
		my $chr 	= $h->{$tr}->{'chr'};
		my $strand 	= $h->{$tr}->{'strand'};

		# Check Biotype
		my $biotype = $h->{$tr}->{'feature'}[0]->{'transcript_biotype'} if (defined $h->{$tr}->{'feature'}[0]->{'transcript_biotype'});

 
		# get cDNA sequence for transcript tr
		$filterforCDS		=	0; # do we filter seq for CDS
		my $cdnaseq 		=	ExtractFromFeature::feature2seq($h->{$tr}->{'feature'}, $genome, $chr , $strand, $filterforCDS, $verbosity);	
			
		#######################################
		# ORF
		if (defined $orffile){
			my $containCDS =   ExtractFromFeature::checkCDS($h->{$tr}->{'feature'});
			if (! $containCDS ){
				warn "Your input GTF file does not contain CDS information... the program will extract the longest one for each transcript...\n" if ($countseqok < 1 && $verbosity > 5);
				# we create an ORF hash based on extraction of longest ORF
				$orfob	=	Orf::longestORF($cdnaseq,$strand, $allow_no_start, $allow_no_stop);
		
			} else {
				warn "Your input GTF file does contain CDS information...\n" if ($countseqok < 1 && $verbosity > 5);
				$filterforCDS 	= 1; # we activate filter to get only CDS and stop codon DNA sequence
				my $orfseq			= ExtractFromFeature::feature2seq($h->{$tr}->{'feature'}, $genome, $chr , $strand, $filterforCDS, $verbosity);
				# we create an ORF hash 
				$orfob	        = Orf::orfSeq2orfOb($orfseq, $strand, $verbosity);
		
			}
		
			# Add ORF to a hash %h_orf only if the ORF is complete
			if ($orfob->{'check_start'} && $orfob->{'check_stop'}){
				$h_orf{$tr}	=	$orfob->{'cds_seq'};
				print STDERR "Extracting ORFs&cDNAs ", $countseqok++,"/$numtx...\r";
			
			} else {
				warn "Tx: $tr ('$biotype') with CDS features: $containCDS is not complete...skipping for training\n" if ($verbosity > 10);
				next; # next if ORF is not OK
			}
		}
		
		#######################################
		# ADD cDNA only (if ORF is OK) : see next in above block
		# store cDNA seq
		if (!defined $orffile){
			print STDERR "Extracting cDNAs ", $countseqok++,"/$numtx...\r";
		}
	    $h_cdna{$tr}	=	$cdnaseq;
		
	
		if ($countseqok == $numtx){
			print STDERR "Max ORF/cDNAs sequences '$numtx' reached..ending!\n";
			last;
		}
	
	
	}
	# if dedfined ORFfile, we write ORF and cDNA file
	if (defined $orffile){
		# Final Check if the number of complete ORF is ok
		my $sizehorf = keys(%h_orf);
		die "The number of complete ORF found with computeORF mode is *$sizehorf* transcripts... That's not enough to training the program\n" if ($sizehorf < $numtx);

		&write2fastafile(\%h_orf,  $orffile, $nbtxdiv2, $verbosity);
		&write2fastafile(\%h_cdna, $cdnafile,$nbtxdiv2, $verbosity);

	# we write only  cDNA file
	} else {
	
		my $sizeh = keys(%h_cdna);
		die "The number of cDNA sequences is *$sizeh* transcripts... That's not enough to training the program\n" if ($sizeh < $numtx);
		&write2fastafile(\%h_cdna, $cdnafile,$nbtxdiv2, $verbosity);		
	}

}


sub CreateORFcDNAFromFASTA{

	my  ($fastafile, $cdnafile, $orffile, $nbtx, $verbosity)	=	@_;

	

	my $nbtxdiv2	= int ($nbtx/2); # to create 2 files
	my %h_orf;					# for storing and printing ORF sequence
	my %h_cdna;					# for storing and printing cDNA sequence
	
	my $allow_no_start 	=	0;	# do not allow for CDS start not found
	my $allow_no_stop 	=	0;	# do not allow for CDS stop not found



	# Create SeqIO objects 
	my $seqin  = Bio::SeqIO->new(-file => $fastafile,      -format => "fasta");

	# count the nb of sequences
	my $nbseq	=0;
	$nbseq++ while( my $seq = $seqin->next_seq());
	die "Your input FASTA '$fastafile' contains only *$nbseq* sequences.\nNot enough to training the program (default option --ntx|-n)\n" if ($nbseq < $numtx);
	
	# counter for seq with ORK ok
	my $countseqok	=	0;
	my $strand		=	".";

	# Go through each sequences
	while(my $seq = $seqin->next_seq) {
	
		my $tr		= $seq->id;
		# only if definied ORF	
		my $orfob	=	Orf::longestORF($seq,$strand, $allow_no_start, $allow_no_stop) 	if (defined $orffile);

		if (!defined $orffile){
			# store cDNA sequence
			my $new_seq = Bio::Seq->new(-id => $tr, -seq => $seq, -alphabet => 'dna');
			$h_cdna{$tr}	=	$new_seq;
            print STDERR "Extracting cDNAs from FASTA ", $countseqok++,"/$numtx complete cDNA(s)...\r";


		} else {# get also ORF
		
			# Add ORF to a hash %h_orf only if the ORF is complete
			if ($orfob->{'check_start'} && $orfob->{'check_stop'}){
				$h_orf{$tr}	=	$orfob->{'cds_seq'};
				print STDERR "Extracting ORFs&cDNAs from FASTA ", $countseqok++,"/$numtx complete ORF(s)...\r";
			
				# store cDNA sequence
# 				my $new_seq = Bio::Seq->new(-id => $tr, -seq => $seq, -alphabet => 'dna');
				$h_cdna{$tr}	=	$seq;
					
			} else {
				warn "Tx: $seq->id : ORF is not complete...skipping for training\n" if ($verbosity > 5);
				next; # next if ORF is not OK
			}
		}
		# Check if numtx is reached
		if ($countseqok == $numtx){
			print STDERR "Max cDNAs/ORF sequences '$numtx' reached..ending!\n";
			last;
		}
			
	}
	# if dedfined ORFfile, we write ORF and cDNA file
	if (defined $orffile){
	
		# Final Check if the number of complete ORF is ok
		my $sizehorf = keys(%h_orf);
		die "The number of complete ORF found with computeORF mode is *$sizehorf* transcripts... That's not enough to training the program\n" if ($sizehorf < $numtx);

		&write2fastafile(\%h_orf,  $orffile, $nbtxdiv2, $verbosity);
		&write2fastafile(\%h_cdna, $cdnafile,$nbtxdiv2, $verbosity);

	# we write only  cDNA file
	} else {
	
		my $sizeh = keys(%h_cdna);
		die "The number of cDNA sequences is *$sizeh* transcripts... That's not enough to training the program\n" if ($sizeh < $numtx);
		&write2fastafile(\%h_cdna, $cdnafile,$nbtxdiv2, $verbosity);		
	}

}


sub write2fastafile{

	my ($h, $prefix, $nbtxdiv2, $verbosity) = @_;
	
	my $nbtx	= int ($nbtxdiv2*2); # to create 2 files

	print STDERR "Writing 2 FASTA files '$prefix'\n" if ($verbosity > 5);

	my $fileone		=	Utils::renamefile($prefix, ".fa_1-".$nbtxdiv2.".fa");		
	my $filetwo		=	Utils::renamefile($prefix, ".fa_".$nbtxdiv2."-".$nbtx.".fa");		
	
	# cDNA
	my $seq1	=	Bio::SeqIO ->new(-format => 'fasta', -file => '>'.$fileone, -alphabet =>'dna');
	my $seq2	=	Bio::SeqIO ->new(-format => 'fasta', -file => '>'.$filetwo, -alphabet =>'dna');
	

	my $cpt = 0;
	foreach my $id (keys %{$h}){
		$cpt++;
		if ($cpt < $nbtxdiv2){
			my $new_seq = Bio::Seq->new(-id => $id, -seq => $h->{$id});
			$seq1->write_seq($new_seq);
		} else {
			my $new_seq = Bio::Seq->new(-id => $id, -seq => $h->{$id});
			$seq2->write_seq($new_seq);		
		}
	}	

}



sub randomizedGTFtoFASTA{

	my ($h, $cdnafile, $genome, $nbtx, $maxTries, $maxN, $verbosity)	=	@_;
	
	$nbtx			||= 1000;	# number of random tx required
	$maxTries		||= 10;	 	# max tries to for computing both overlap and N
	$maxN			||= 5; 		# Proportion (in 100%) of N's authorized in new random sequence 
	$verbosity		||= 0;  

	my $nbtxdiv2	= int ($nbtx/2); # to create 2 files

	my $split 			= 1;
	my $hlightforover	= Parser::GTF2GTFgnlight ($h, $split, $verbosity);
	
	# Get genome sequences size
	print STDERR "- Get chromosome sizes \n" if ($verbosity > 0);
	my $db      = Bio::DB::Fasta->new($genome);
	my $refgenomesize;
	foreach my $id ( $db->ids){
		next if ($id =~ /^AAEX|^JH/ ); # for dog chromosome
		$refgenomesize->{$id} = $db->length($id); # populate hash with id => seq_length
	}
	
	#  hashref tx annotation sizes
	my $refannotsize 	= ExtractFromHash::getCumulSizeFromGtfHash ($h,$verbosity, 0);


	print STDERR "- Relocate Transcripts \n" if ($verbosity > 0);
	my $i=0;
	my $h_transcript_size	= keys(%{$h}); 

	my %h_cdna_rdm; # to store correclty relocated sequences

	TX: 
	foreach my $tx (keys %{$refannotsize}){

		my $overlap 	= 1; # Initialize variable for iterative search for selfoverlap
		my $includeN	= 1; # Initialize variable for iterative search for N
		my $countTries	= 0; # Number of tries
	
		# data for new sequence
		my ($chrrdm, $beg, $end, $seq);
		$seq			=  ""; # new fasta sequence ==> initialize in case pb with bio::db index

		if (defined $nbtx && $i == $nbtx){
			print STDERR "- Max number of transcripts (--nbtx == $nbtx) reached... ending!\n";
			last;
		}
		
		# while there is an overlap with known annotation
		while ($overlap || $includeN){
		
			# maxTries
			$countTries++;		
			if ( $countTries ==  $maxTries){
				print  STDERR "MaxTries reached ($maxTries) for $tx...skipping it\n";
				next TX;
			}
		
			# define a rand indice for all chr hash
			my $randindex	=	int( rand(scalar keys %{$refgenomesize}) );
			my @chrrdm		=	keys(%{$refgenomesize});
			$chrrdm			=	$chrrdm[$randindex];
	
			# define a random start/begin position on the random chr (and thus the end)
			$beg		=  int(rand($refgenomesize->{$chrrdm}));
			$end		=  $beg + $refannotsize->{$tx};		
		
			# Self - Overlap			
			$overlap = overlapwithH($chrrdm,$beg,$end, $hlightforover, $countTries, $verbosity);
			if ($overlap){
				next;
			} else{
				$overlap =0;
			}
		
			# Test for Ns
			#############
			my $propN;
			($propN,$seq) 	=	getPropN($chrrdm,$beg,$end, $db, 'N');
			if ($propN == -1){
				warn "Try: $countTries -> Extract sequences for $tx ($chrrdm:$beg-$end) returns an undefined sequence... skipping it\n" if ($verbosity > 10);		
			} elsif ($propN > $maxN){
				warn "Try: $countTries -> Extract sequences for $tx ($chrrdm:$beg-$end) returns a $propN % with N!... skipping it\n" if ($verbosity > 10);
			}else {
				$includeN = 0;
			}
		}
		# Write New random sequence
		my $id				= $tx."_random ($chrrdm:$beg-$end)";
		$h_cdna_rdm{$id}	=	$seq;

		# verbosity
		if ($verbosity > 0){
			Utils::showProgress($nbtx, $i++, "Print ".$tx.": ");
		}
	}
	
	my $sizeh = keys(%h_cdna_rdm);
	die "The number of RANDOMLY relocated cDNA sequences =  *$sizeh* transcripts... That's not enough to training the program\n" if ($sizeh < $numtx);
	&write2fastafile(\%h_cdna_rdm, $cdnafile,$nbtxdiv2, $verbosity);

}

# test for overlap between a chr:start-end and a refh splited by chr
sub overlapwithH{

	my ($chr,$start,$end, $rehchr, $count, $verbosity)	= @_;

	my $overlap = 0;			
	if (exists $rehchr->{$chr}){ # for the chromosome in the annotation test overlap
				
		my $refhchr	=	$rehchr->{$chr}; 
		
		# Test for overlap with annotation $h	
		foreach my $locus (ExtractFromHash::sortGnsStartg($refhchr)){
		
			my $annbeg	= $rehchr->{$chr}->{$locus}->{"startg"};
			my $annend	= $rehchr->{$chr}->{$locus}->{"endg"};
			my $strand	= $rehchr->{$chr}->{$locus}->{"strand"};
			
			# trick to speed  loop
			next if ($annend	< $start); 
			if 		($annbeg	> $end){
				$overlap =0;
				last;
			}
			
			# test overlap
			$overlap = Utils::foverlap($start,$end,$annbeg,$annend, $strand, ".", 0);

			if ($overlap){
				print STDERR "Try: $count -> Overlap $chr:$start-$end -- $chr:$annbeg-$annend ($strand) $locus \n" if ($verbosity > 10);
				last;
			}
		}
	} else { # if new chromosome is not in the exclusion file (chr without feature)
		$overlap = 0;
	}
			
	return $overlap;

}

# get proportion of N ($nucleotide) in a sequence defined by
# -$chr,$start,$end,
# -$db a bio::db::fasta object
sub getPropN{

	my ($chr,$start,$end, $db, $nucleotide) = @_;

	my $propN	= -1; # default values
	my $seq = "";	
	
	# Get sequence
	$seq = $db->seq($chr, $start => $end);
	# test if good sequence
	if ($seq eq ""){
		warn "getPropN:: Sequence ($chr:$start-$end) returns an empty string!...skipping it\n";
	} else {
		my $numberofN = () = $seq  =~ /$nucleotide/gi;
		$propN = int( $numberofN *100 / ($end-$start) );
	}
	
	return ($propN, $seq);

}


# print STDERR ">> Transcripts left after overlap : ",scalar keys (%{$reflnc}),"\n";
# print STDERR "Printing candidates lncRNAs...\n";
# ExtractFromHash::printGTF($reflnc, 'all',  $verbosity)



__END__

=pod

=encoding UTF-8

=head1 NAME

FEELnc_codpot.pl -

=head1 VERSION

version 0.01

=head1 SYNOPSIS

FEELnc_codpot.pl -i transcripts.GTF -a known_mRNA.GTF -g genome.FA -l known_lnc.GTF  [options...]

=head1 DESCRIPTION

FEELnc (Fast and Effective Extraction of Long non-coding RNAs) is dedicated to the annotation of lncRNAs 
based on a set of transcripts as input (basically a cufflink transcripts.gtf file)
The second step if the pipeline (FEELnc_codpot) is to compute coding potential of the input transcripts.

=head1 OPTIONS

=head2 General

  --help                Print this help
  --man                 Open man page
  --verbosity		Level of verbosity
  

=head2 Mandatory arguments

  -i,--infile=file.gtf		Specify the GTF file  (such as a cufflinks transcripts/merged .GTF file) 
  -a,--mRNAfile=file.gtf	Specify the annotation GTF file  (file of protein coding annotation)
  

=head2 Filtering arguments

  -s,--size=200			Keep transcript with a minimal size (default 200)
  -b,--biotype			Discard transcript overlapping transcript(s) from the reference annotation having this(these) biotype(s) (e.g : -b transcript_biotype=protein_coding,pseudogene) [default undef i.e all transcripts]
  -l,--linconly			Keep only long intergenic/interveaning ncRNAs [default FALSE]. 
  --monoex=-1|0|1		Keep monoexonic transcript(s): mode to be selected from : -1 keep monoexonic antisense (stranded data), 1 keep all monoexonic, 0 remove all monoexonic	[default 0]
  --biex=25			Discard biexonic transcripts having one exon size lower to this value (default 25)
  
=head2 Overlapping specification 


  -f,--minfrac_over=0		minimal fraction of the candidate lncRNA length to be considered for overlap [default 0 i.e 1bp]
  -p,--proc=4			number of thread for computing overlap [default 4]


=head2 Log output

  -o,--outlog=file.log		Specify the log file of output which [default infile.log]



=head1 AUTHORS

=over 4

=item *

Thomas DERRIEN <tderrien@univ-rennes1.fr>

=back

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2014 by IGDR - CNRS

=cut
