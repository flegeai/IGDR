.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::InteractionCollection 3"
.TH Bio::SeqFeature::InteractionCollection 3 "2014-12-04" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "\s-1CLASS:\s0 InteractionCollection"
.IX Subsection "CLASS: InteractionCollection"
\&\s-1SUPER\s0 \s-1CLASS\s0 : None
.PP
Bio::SeqFeature::InteractionCollection
.PP
Use : Interaction ; Iterator
.SH "ABOUT Authors: Audrey DAVID \- M2 Informatique opt Bioinfo Nantes Fabrice LEGEAI \- IRISA/INRIA Rennes / INRA Rheu Thomas	 DERRIEN \- CNRS Rennes If you have questions contact authors."
.IX Header "ABOUT Authors: Audrey DAVID - M2 Informatique opt Bioinfo Nantes Fabrice LEGEAI - IRISA/INRIA Rennes / INRA Rheu Thomas	 DERRIEN - CNRS Rennes If you have questions contact authors."
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Implement several method to manipulate Collection of interaction
Implementation of classification rules of Derrien et al 2011. 
= head1 Others
Usually many of these method as Method has to be used like :
.PP
my \f(CW$res\fR = \f(CW$col\fR\->\fIMethod()\fR;
.PP
some of method can not return result than it's a printer and has to be use like
\&\f(CW$col\fR\->\fIMethod()\fR;
.PP
Please check the description
.SH "\fInew()\fP"
.IX Header "new()"
Bio::SeqFeature::InteractionCollection
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
my \f(CW$coll\fR = Bio::SeqFeature::InteractionCollection\->new(@interactions)
contains a list of subjects index and  a list of objects index
.SH "add_interaction"
.IX Header "add_interaction"
Bio::SeqFeature::Interaction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
add an Interaction or a list of interaction in a collection of interactions
.SH "remove_interaction"
.IX Header "remove_interaction"
Bio::SeqFeature::Interaction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
revome an Interaction or a list of interaction in a collection of interactions
based on the subject and object index
.SH "get_interaction"
.IX Header "get_interaction"
Bio::SeqFeature
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
get all Interaction share by an seqfeature
.PP
the seqfeature can be
	 object => (1),
	 subject => (2),
	 both => (3).
.PP
by defeault the seqfeature can be all the second parameter is 3
.PP
if the seqfeature is the object fill 1 for the second parameter 
if the seqfeature is the subject fill 2 for the second parameter
.PP
\&\f(CW$col\fR\->get_interaction($feature, 2 ); #look for all interaction shared by \f(CW$feature\fR and in which \f(CW$feature\fR is the subject
.PP
note:  if you pass an unrecognized second argument, than the default one will be called (means : all )
.SH "get_all_interaction"
.IX Header "get_all_interaction"
Bio::SeqFeature::CollectionInteraction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
return an BIo::SeqFeature::Iterator object containing interactions
.SH "print_all_interaction"
.IX Header "print_all_interaction"
Bio::SeqFeature::CollectionInteraction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
print all the collection
.SH "sayme_type"
.IX Header "sayme_type"
Bio::SeqFeature::CollectionInteraction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\& say if the string type is correct 
\& return the associated number
\& or the opposite
.Ve
.SH "get_interactions_with_tags OBSOLETE use the one with tags values"
.IX Header "get_interactions_with_tags OBSOLETE use the one with tags values"
.Vb 1
\& return Bio::SeqFeature::InteractionIterator
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
check if interactions corresponding to a list of fixed tags
better to use get_interactions_with_tags_values
.SH "get_interactions_with_tags_values"
.IX Header "get_interactions_with_tags_values"
.Vb 1
\& return Bio::SeqFeature::InteractionIterator
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
whatever are the tags and values, check if interactions corresponding
see the list of tags in the manual , or using tags_list method
.PP
note:  if you pass an unexisting tag ...
.SH "get_with_distance_value"
.IX Header "get_with_distance_value"
.Vb 1
\& return Bio::SeqFeature::InteractionIterator
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You might want to have a list of  interaction wich have a specific distance.
Example : less or equal to 400 bases 
	\f(CW$collection\fR\->get_with_distance_value(400,'le')
	eq : equal
	lt : less than
	le : less or equal to 
	gt : greater than
	ge : greater or equal to
.SH "get_with_intervalle"
.IX Header "get_with_intervalle"
.Vb 1
\& return Bio::SeqFeature::InteractionIterator
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You might want to have a list of interaction having distance within an intervalle
.PP
.Vb 1
\&        $collection\->get_interactions_with_intervalle(400,800)
.Ve
.SH "get_best_interactions"
.IX Header "get_best_interactions"
.Vb 2
\& return Bio::SeqFeature::InteractionCollection
\&$collection\->get_best_interaction($collection, @lncRNA)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&        Give you the better interaction of a list of lncRNA
.Ve
.SH "objects_list"
.IX Header "objects_list"
.Vb 1
\& return a list of Bio::SeqFeature
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&        You might want to know the list of object containing in the collection
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 39:" 4
.IX Item "Around line 39:"
=cut found outside a pod block.  Skipping to next block.
.IP "Around line 631:" 4
.IX Item "Around line 631:"
=cut found outside a pod block.  Skipping to next block.
.IP "Around line 700:" 4
.IX Item "Around line 700:"
=cut found outside a pod block.  Skipping to next block.
.IP "Around line 743:" 4
.IX Item "Around line 743:"
=cut found outside a pod block.  Skipping to next block.
.IP "Around line 824:" 4
.IX Item "Around line 824:"
=cut found outside a pod block.  Skipping to next block.
